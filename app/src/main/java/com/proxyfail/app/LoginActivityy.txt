package com.proxyfail.app;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;
import android.util.Log;

import androidx.appcompat.app.AppCompatActivity;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FieldValue;
import java.util.HashMap;
import java.util.Map;
import com.proxyfail.app.databinding.ActivityLoginBinding;

public class LoginActivity extends AppCompatActivity {

    private ActivityLoginBinding binding;
    private FirebaseAuth auth;
    private FirebaseFirestore db;
    private FirebaseAuth.AuthStateListener authStateListener;
    private boolean isRedirecting = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Initialize Firebase
        auth = FirebaseAuth.getInstance();
        db = FirebaseFirestore.getInstance();

        binding = ActivityLoginBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // ðŸ”¹ If user already logged in â†’ route to correct dashboard
        FirebaseUser user = auth.getCurrentUser();
        if (user != null) {
            // Use auth state listener below for consistent handling, but perform a fast redirect once here
            isRedirecting = true;
            redirectBasedOnRole(user.getUid());
            return;
        }

        // ðŸ”¹ Login button
        binding.btnLogin.setOnClickListener(v -> {
            String email = binding.etEmail.getText().toString().trim();
            String pass = binding.etPassword.getText().toString().trim();

            if (email.isEmpty() || pass.isEmpty()) {
                Toast.makeText(this, "Enter email & password", Toast.LENGTH_SHORT).show();
                return;
            }

            binding.progressBar.setVisibility(View.VISIBLE);
            auth.signInWithEmailAndPassword(email, pass)
                    .addOnCompleteListener(task -> {
                        binding.progressBar.setVisibility(View.GONE);
                        if (task.isSuccessful()) {
                            FirebaseUser u = auth.getCurrentUser();
                            if (u != null) {
                                Toast.makeText(this, "Welcome " + u.getEmail(), Toast.LENGTH_SHORT).show();
                                Log.d("LoginActivity", "signInWithEmail: success for uid=" + u.getUid());
                                if (!isRedirecting) {
                                    isRedirecting = true;
                                    redirectBasedOnRole(u.getUid());
                                } else {
                                    Log.d("LoginActivity", "Already redirecting, skipping duplicate redirect");
                                }
                            }
                        } else {
                            Log.w("LoginActivity", "signInWithEmail: failed", task.getException());
                            Toast.makeText(this, "Login failed: " + task.getException().getMessage(),
                                    Toast.LENGTH_LONG).show();
                        }
                    });
        });

        // ðŸ”¹ Register button â†’ open proper RegisterActivity
        binding.btnRegister.setOnClickListener(v ->
                startActivity(new Intent(LoginActivity.this, RegisterActivity.class)));

        // wire forgot-password (replace binding.tvForgotPassword with your actual view id if different)
        binding.tvForgotPassword.setOnClickListener(v -> {
            String email = binding.etEmail.getText().toString().trim();
            if (email.isEmpty()) {
                android.widget.EditText input = new android.widget.EditText(this);
                input.setInputType(android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
                new androidx.appcompat.app.AlertDialog.Builder(this)
                        .setTitle("Reset password")
                        .setMessage("Enter your email to receive a password reset link")
                        .setView(input)
                        .setPositiveButton("Send", (dlg, which) -> {
                            String e = input.getText().toString().trim();
                            if (e.isEmpty()) {
                                android.widget.Toast.makeText(this, "Enter an email", android.widget.Toast.LENGTH_SHORT).show();
                                return;
                            }
                            sendResetEmail(e);
                        })
                        .setNegativeButton("Cancel", null)
                        .show();
            } else {
                sendResetEmail(email);
            }
        });
    }

    // ðŸ”¹ Function to check role and redirect
    private void redirectBasedOnRole(String uid) {
        db.collection("users").document(uid).get()
                .addOnSuccessListener(document -> {
                    if (document.exists()) {
                        String role = document.getString("role");
                        Intent intent;
                        if ("teacher".equalsIgnoreCase(role)) {
                            intent = new Intent(this, TeacherDashboardActivity.class);
                        } else {
                            intent = new Intent(this, StudentDashboardActivity.class);
                        }
                        startActivity(intent);
                        finish();
                    } else {
                        Log.w("LoginActivity", "User profile not found for uid=" + uid + ". Creating minimal student profile.");
                        // If the user was created in Auth but no profile exists in Firestore,
                        // create a minimal student profile so the app can proceed.
                        Map<String, Object> profile = new HashMap<>();
                        profile.put("email", auth.getCurrentUser() != null ? auth.getCurrentUser().getEmail() : "");
                        profile.put("name", "");
                        profile.put("role", "student");
                        profile.put("createdAt", FieldValue.serverTimestamp());

                        db.collection("users").document(uid).set(profile)
                                .addOnSuccessListener(aVoid -> {
                                    Toast.makeText(this, "Profile created; continuing as student", Toast.LENGTH_SHORT).show();
                                    Intent intent = new Intent(this, StudentDashboardActivity.class);
                                    startActivity(intent);
                                    finish();
                                })
                                .addOnFailureListener(e -> {
                                    Log.e("LoginActivity", "Failed to create user profile for uid=" + uid, e);
                                    Toast.makeText(this, "User profile not found and creation failed.", Toast.LENGTH_LONG).show();
                                });
                    }
                })
                .addOnFailureListener(e ->
                        Toast.makeText(this, "Failed to fetch user role: " + e.getMessage(), Toast.LENGTH_LONG).show());
    }

    private void sendResetEmail(String email) {
        binding.progressBar.setVisibility(View.VISIBLE);
        auth.sendPasswordResetEmail(email)
                .addOnCompleteListener(task -> {
                    binding.progressBar.setVisibility(View.GONE);
                    if (task.isSuccessful()) {
                        Toast.makeText(this, "Reset email sent to " + email, Toast.LENGTH_LONG).show();
                    } else {
                        Toast.makeText(this, "Error: " + task.getException().getMessage(), Toast.LENGTH_LONG).show();
                    }
                });
    }

    @Override
    protected void onStart() {
        super.onStart();
        // install an AuthStateListener to detect unexpected sign-outs
        authStateListener = firebaseAuth -> {
            FirebaseUser user = firebaseAuth.getCurrentUser();
            Log.d("LoginActivity", "AuthState changed. user=" + (user == null ? "null" : user.getUid()));
            if (user != null && !isRedirecting) {
                isRedirecting = true;
                redirectBasedOnRole(user.getUid());
            }
        };
        auth.addAuthStateListener(authStateListener);
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (authStateListener != null) {
            auth.removeAuthStateListener(authStateListener);
            authStateListener = null;
        }
    }
}
