30/10/2025

package com.proxyfail.app;

import android.Manifest;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import com.google.android.material.button.MaterialButton;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FieldValue;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.messaging.FirebaseMessaging;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class TeacherDashboardActivity extends AppCompatActivity {
    private static final String TAG = "TeacherDashboardActivity";
    private static final String BEACON_UUID = "12345678-1234-5678-1234-56789abcdef0";

    private MaterialButton btnStartSession, btnEndSession, btnSignOut, btnScheduleNotifications, btnViewAttendance;
    private ImageView qrImage;
    private TextView tvSessionStatus, tvBeaconStatus;
    private ProgressBar progressBar;

    private FirebaseAuth auth;
    private FirebaseFirestore db;

    private String activeSessionId = null;
    private String courseId = "CS401-FALL25";
    private boolean isBeaconRunning = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_teacher_dashboard);

        auth = FirebaseAuth.getInstance();
        db = FirebaseFirestore.getInstance();

        btnStartSession = findViewById(R.id.btnStartSession);
        btnEndSession = findViewById(R.id.btnEndSession);
        btnSignOut = findViewById(R.id.btnSignOut);
        btnScheduleNotifications = findViewById(R.id.btnScheduleNotifications);
        btnViewAttendance = findViewById(R.id.btnViewAttendance);
        qrImage = findViewById(R.id.qrImage);
        tvSessionStatus = findViewById(R.id.tvSessionStatus);
        tvBeaconStatus = findViewById(R.id.tvBeaconStatus);
        progressBar = findViewById(R.id.progressBar);

        btnStartSession.setOnClickListener(v -> startSession());
        btnEndSession.setOnClickListener(v -> endSession());
        btnSignOut.setOnClickListener(v -> handleSignOut());
        btnScheduleNotifications.setOnClickListener(v -> startActivity(new Intent(this, CalendarNotificationActivity.class)));
        btnViewAttendance.setOnClickListener(v -> {
            Intent i = new Intent(this, TeacherAttendanceReviewActivity.class);
            if (activeSessionId != null) i.putExtra("SESSION_ID", activeSessionId);
            startActivity(i);
        });

        updateBeaconStatus(false);
        btnEndSession.setEnabled(false);

        // Save teacher FCM token
        FirebaseMessaging.getInstance().getToken()
                .addOnSuccessListener(token -> {
                    db.collection("users").document(auth.getUid())
                            .update("fcmToken", token)
                            .addOnSuccessListener(a -> Log.d(TAG, "Teacher FCM token saved"))
                            .addOnFailureListener(e -> Log.e(TAG, "Failed to save FCM token", e));
                });
    }

    private void handleSignOut() {
        if (isBeaconRunning) stopBeaconAdvertising();
        activeSessionId = null;
        isBeaconRunning = false;
        updateBeaconStatus(false);
        FirebaseAuth.getInstance().signOut();
        Toast.makeText(this, "Signed out", Toast.LENGTH_SHORT).show();
        finish();
    }

    private void startSession() {
        FirebaseUser user = auth.getCurrentUser();
        if (user == null) {
            Toast.makeText(this, "Please log in again", Toast.LENGTH_SHORT).show();
            finish();
            return;
        }

        if (!checkBeaconPermissions()) {
            requestBeaconPermissions();
            return;
        }

        if (progressBar != null) progressBar.setVisibility(View.VISIBLE);
        String qrCodeValue = "QR-" + UUID.randomUUID().toString().substring(0, 8);

        Map<String, Object> session = new HashMap<>();
        session.put("courseId", courseId);
        session.put("requiredBeaconServiceUuid", BEACON_UUID);
        session.put("qrCodeValue", qrCodeValue);
        session.put("isActive", true);
        session.put("teacherId", user.getUid());
        session.put("createdAt", FieldValue.serverTimestamp());
        // ✅ Added location field (important!)
        session.put("location", new HashMap<String, Object>() {{
            put("latitude", 40.7128);
            put("longitude", -74.0060);
        }});

        db.collection("sessions").add(session)
                .addOnSuccessListener(docRef -> {
                    activeSessionId = docRef.getId();
                    generateQRCode(qrCodeValue);
                    startBeaconAdvertising();
                    if (progressBar != null) progressBar.setVisibility(View.GONE);
                    tvSessionStatus.setText("Session Active: " + activeSessionId);
                    btnEndSession.setEnabled(true);
                    Toast.makeText(this, "Session & Beacon started!", Toast.LENGTH_SHORT).show();
                })
                .addOnFailureListener(e -> {
                    if (progressBar != null) progressBar.setVisibility(View.GONE);
                    Log.e(TAG, "Failed to start session", e);
                });
    }

    private void endSession() {
        if (activeSessionId == null) {
            Toast.makeText(this, "No active session", Toast.LENGTH_SHORT).show();
            return;
        }

        if (progressBar != null) progressBar.setVisibility(View.VISIBLE);
        DocumentReference ref = db.collection("sessions").document(activeSessionId);
        ref.update("isActive", false, "endedAt", FieldValue.serverTimestamp())
                .addOnSuccessListener(aVoid -> {
                    stopBeaconAdvertising();
                    if (progressBar != null) progressBar.setVisibility(View.GONE);
                    tvSessionStatus.setText("Session ended.");
                    qrImage.setImageBitmap(null);
                    btnEndSession.setEnabled(false);
                    activeSessionId = null;
                })
                .addOnFailureListener(e -> {
                    if (progressBar != null) progressBar.setVisibility(View.GONE);
                    Log.e(TAG, "Failed to end session", e);
                });
    }

    private boolean checkBeaconPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S)
            return ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_ADVERTISE) == PackageManager.PERMISSION_GRANTED;
        return true;
    }

    private void requestBeaconPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (!shouldShowRequestPermissionRationale(Manifest.permission.BLUETOOTH_ADVERTISE))
                Toast.makeText(this, "Bluetooth permission is needed for beacon advertising.", Toast.LENGTH_LONG).show();
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.BLUETOOTH_ADVERTISE}, 200);
        }
    }

    private void startBeaconAdvertising() {
        BluetoothManager bm = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
        if (bm == null) return;
        BluetoothAdapter adapter = bm.getAdapter();
        if (adapter == null || !adapter.isEnabled()) {
            Toast.makeText(this, "Enable Bluetooth to start beacon", Toast.LENGTH_LONG).show();
            return;
        }
        if (!adapter.isMultipleAdvertisementSupported()) {
            Toast.makeText(this, "Device doesn’t support BLE advertising", Toast.LENGTH_LONG).show();
            return;
        }

        Intent i = new Intent(this, BeaconAdvertiserService.class);
        i.putExtra(BeaconAdvertiserService.EXTRA_SERVICE_UUID, BEACON_UUID);
        i.putExtra(BeaconAdvertiserService.EXTRA_SESSION_DATA, activeSessionId);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) startForegroundService(i);
        else startService(i);
        isBeaconRunning = true;
        updateBeaconStatus(true);
    }

    private void stopBeaconAdvertising() {
        stopService(new Intent(this, BeaconAdvertiserService.class));
        isBeaconRunning = false;
        updateBeaconStatus(false);
    }

    private void updateBeaconStatus(boolean ready) {
        if (tvBeaconStatus != null) {
            tvBeaconStatus.setText(ready ? "Beacon: Ready ✅" : "Beacon: Not Ready ❌");
            tvBeaconStatus.setTextColor(ContextCompat.getColor(this,
                    ready ? android.R.color.holo_green_dark : android.R.color.holo_red_dark));
        }
    }

    private void generateQRCode(String data) {
        try {
            QRCodeWriter writer = new QRCodeWriter();
            BitMatrix bitMatrix = writer.encode(data, BarcodeFormat.QR_CODE, 512, 512);
            Bitmap bitmap = Bitmap.createBitmap(512, 512, Bitmap.Config.RGB_565);
            for (int x = 0; x < 512; x++)
                for (int y = 0; y < 512; y++)
                    bitmap.setPixel(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);
            qrImage.setImageBitmap(bitmap);
        } catch (WriterException e) {
            Log.e(TAG, "QR Generation failed", e);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (isBeaconRunning) stopBeaconAdvertising();
    }
}